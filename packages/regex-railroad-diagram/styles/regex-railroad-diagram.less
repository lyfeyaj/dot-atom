// The ui-variables file is provided by base themes provided by Atom.
//
// See https://github.com/atom/atom-dark-ui/blob/master/stylesheets/ui-variables.less
// for a full listing of what's available.
@import "ui-variables";

.regex-railroad-diagram {
  background: @tab-bar-background-color;
  overflow-x: scroll;

  display: block;

  @terminal-text-color: @text-color-highlight;
  @non-terminal-text-color: @text-color;
  @line-color: @text-color-highlight;
  @box-color: @background-color-highlight;
  //@box-outline-color: @tab-border-color;
  @box-outline-color: @text-color-highlight;

  .settings-view {
    display: flex;

    padding: 5px;

    > div {
      padding: 5px 5px;
    }

    .texteditor-container {
      flex: 100 1;
    }

    .option-buttons {
      flex: 1;
      flex-wrap: nowrap;
      display: flex;
      font-weight: bold;
    }

  }

  .set-color-basis() when (lightness(@text-color) >= 50%)  {
      // for stroke
      @L: 240;
      @D: 200;
      @A: 0.3;

      // for fill
      @l: 30;
      @d:  0;
      @a: 0.6;

      // for text
      @tl: 240;
      @td: 200;
      @ta:   1;

      @B:  0;

      @tL: 200;
      @tD: 150;
  }
  .set-color-basis() when (lightness(@text-color) < 50%)  {
      // for stroke
      @L: 210;
      @D: 120;
      @A: 0.7;

      // for fill
      @l: 120;
      @d:  80;
      @a: 0.5;

      // for text
      @tl: 220;
      @td: 180;
      @ta:   1;

      @B:  0;

      @tL: 200;
      @tD: 150;
  }
  .set-color-basis();

  @literal-stroke-color: rgba(@D, @L, @D, @A);
  @assertion-stroke-color: rgba(@L, @D, @L, @A);
  @capture-stroke-color: rgba(@D, @D, @L, @A);
  @back-reference-stroke-color: rgba(@D, @D, @L, @A);
  @character-class-stroke-color: rgba(@L, @L, @D, @A);
  @character-class-invert-stroke-color: rgba(@L, @D, @D, @A);

  @zero-width-positive-stroke-color: rgba(@D, @L, @D, @A);
  @zero-width-negative-stroke-color: rgba(@L, @D, @D, @A);

  @literal-fill-color: rgba(@d, @l, @d, @a);
  @assertion-fill-color: rgba(@l, @d, @l, @a);
  @capture-fill-color: rgba(@d, @d, @l, 0.1);
  @back-reference-fill-color: rgba(@d, @d, @l, 0.1);
  @zero-width-positive-fill-color: rgba(@l, @d, @l, 0.1);
  @zero-width-negative-fill-color: rgba(@l, @d, @l, 0.1);
  @character-class-fill-color: rgba(@l, @l, @d, @a);
  @character-class-invert-fill-color: rgba(@l, @d, @d, @a);

  @literal-text-color: rgba(@td, @tl, @td, @ta);
  @assertion-text-color: rgba(@tl, @td, @tl, @ta);
  @capture-text-color: rgba(@td, @td, @tl, @ta);
  @back-reference-text-color: rgba(@td, @td, @tl, @ta);
  @zero-width-positive-text-color: rgba(@td, @tl, @td, @ta);
  @zero-width-negative-text-color: rgba(@tl, @td, @td, @ta);
  @character-class-text-color: rgba(@tl, @tl, @td, @ta);
  @character-class-invert-text-color: rgba(@tl, @td, @td, @ta);

  @quantified-lazy-text-color: rgba(@tD, @tL, @tL, @ta);
  @quantified-greedy-text-color: rgba(@tL, @tD, @tL, @ta);

  .error-message {
    color: @text-color-error;
    // background-color: @background-color-error;
  }

  svg.railroad-diagram {
    stroke: @line-color;
    fill: @non-terminal-text-color;
    max-width: 100%;
    max-height: 50vh;

    path {
        stroke-width: 2;
        fill: rgba(0,0,0,0);
    }

    text {
      font-size: @font-size;
      font-family: @font-family;
      stroke-width: 0;
      fill: @text-color-highlight;

    //  font: bold 14px monospace;
      text-anchor: middle;
    }

    // text.label {
    //   text-anchor: start;
    // }
    //
    // text.comment {
    //   font-size: @font-size;
    //   font-family: @font-family;
    //   fill: @text-color;
    // }

    rect {
      stroke-width: 3;
      stroke: @box-outline-color;
      fill: @box-color;
    }

    g.literal {
      > rect {
        stroke: @literal-stroke-color;
        fill: @literal-fill-color;
      }
      > text {
        fill: @literal-text-color;
      }
    }

    g.character-class {
      > rect {
        stroke: @character-class-stroke-color;
        fill: @character-class-fill-color;
      }
      > text {
        fill: @character-class-text-color;
      }
    }

    g.character-class.invert {
      > rect {
        stroke: @character-class-invert-stroke-color;
        fill: @character-class-invert-fill-color;
      }
      > text {
        fill: @character-class-invert-text-color;
      }
    }

    g.zero-width-assertion {
      > rect {
        stroke: @assertion-stroke-color;
        fill: @assertion-fill-color;
      }
      > text {
        fill: @assertion-text-color;
      }
    }

    g.group {
      > rect {
          stroke-width: 1;
          fill: rgba(0, 0, 0, 0);
      }
    }

    g.group.capture-group {
      > rect {
        stroke: @capture-stroke-color;
        fill: @capture-fill-color;
      }
      g.caption text {
        fill: @capture-text-color;
      }
    }

    g.zero-width-assertion.group {
      > rect {
          stroke-width: 2;
      }
    }

    g.zero-width-assertion.positive {
      > rect {
        stroke: @zero-width-positive-stroke-color;
        fill: @zero-width-positive-fill-color;
      }
      g.caption text {
        fill: @zero-width-positive-text-color;
      }
    }

    g.zero-width-assertion.negative {
      > rect {
        stroke: @zero-width-negative-stroke-color;
        fill: @zero-width-negative-fill-color;
      }
      g.caption text {
        fill: @zero-width-negative-text-color;
      }
    }

    g.back-reference {
      > rect {
        stroke: @back-reference-stroke-color;
        fill: @back-reference-fill-color;
      }
      > text {
        fill: @back-reference-text-color;
      }
    }

    g.quantified.lazy {
      text {
        fill: @quantified-lazy-text-color;
      }
    }

    g.quantified.greedy {
      text {
        fill: @quantified-greedy-text-color;
      }
    }
  }
}
